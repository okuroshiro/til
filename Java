Javaでプログラムを開発するためには、「コンパイラ」と「インタプリタ」というソフトウェアが必要。「コンパイラ」は、Javaの文法に沿って記述したソースコードをバイトコードに変換する。
「インタプリタ」は、内部に持っているJVM（Java Virtual Machine）の仕組みを使ってこれを解釈し、マシン語に変換してCPUに送り、CPUは命令を受けて実行する。


・JavaScriptにおける定数はconstであったが、Javaにおける定数はfinalを使用する。
（例）
public class Main{
  public static void main(String[] args){
    final double PI = 3.14; //定数として円周率を再現
    int pie = 5;
    System.out.println(pie * pie * PI);
  }
}
この場合、pieに再代入しようとして誤ってPIと記述してもfinalを記述して定数宣言したためエラーが起こる。


＜代表的なデータ型＞
整数
　1.byte とても小さな整数　（例：byte pencil //所持するペンの数）
　2.short　小さな整数　（例：short age //年齢）
　3.int　普通の整数　（例：int salary //給与金額）　←利用頻度高い
　4.long 大きな整数　（例：long world people //世界の人口）
小数
　5.float 少し曖昧でもよい数字　（例：float weight //体重）
　6.double 普通の小数　（例：double pi //円周率）
真偽値
　7.boolean tureかfalse　（例：boolean isError //エラーか否か）
文字
　8.char 1つの文字　（例：char initial //イニシャル1文字）
文字列
　9.String 文字の並び　（例：String name //名前）　←利用頻度高い

＜代表的なリテラル表記とデータ型＞
1.小数点がない数字（例：30）　型：int
2.小数点がない数字で末尾がLまたはl（例：300000L）　型：long
3.小数点付きの数字（例：30.5）　型：double
4.小数点付きの数字で末尾がFまたはf（例：30.5F）　型：float
5.trueまたはfalse（例：true）　型：boolean
6.引用符で囲まれた文字（例：'三'）　型：char
7.二重引用符で囲まれた文字列（例："Java"）　型：String
※6と7は、一見'A'と"A"は同じように見えるが、引用符の違いによって別のデータ型として扱われるので注意。

＜比較して大きい法の数値を代入＞
int m = Math.max(①, ②);

＜乱数＞
int r = new java.util.Random().nextInt(数字);　←この数字は発生させる乱数の上限値（指定値自体は含まない）
（例　数字に10を指定すると0~9のいずれかが代入される。

＜キーボード入力＞（Rubyでいうgets）
①キーボードから1行の文字列の入力を受ける場合（Rubyでいうgets.to_s）
String s = new java.util.Scanner(System.in).nextLine();

②キーボードから1つの整数の入力を受ける場合（Rubyでいうgets.to_i）
int input = new java.util.Scanner(System.in).nextInt();

＜改行＞
する
System.out.println(〇〇);
しない
System.out.print(〇〇);

＜条件分岐＞
Rubyのときのif elseと似ている書き方。
（例　
public class Main {
  public static void main8String[] args){
    boolean tenki = true;
    if (tenki == true){
      System.out.println("洗濯");
    } else{
      System.out.println("掃除");
    }
  }
}

＊否定演算子の場合
（例
if (!(age == 10)){...

＊endはRubyと違っていらない
＊関係演算子はRubyと同じ
（==　左辺と右辺が等しい）
（!=　左辺と右辺が異なる）
（>　　左辺が右辺より大きい）
（<　　左辺が右辺より小さい）
（>=　左辺が右辺以上）
（<=　左辺が右辺以下）
＊文字列の比較は
if (str == "太陽"){...ではなく
if (str.equals("太陽")){...となる

＜繰り返し処理＞（Rubyではeach）
（例
public class Main {
  public static void main8String[] args){
    boolean doorClose = true;
    while (doorClose == true){
      System.out.println("ノック");
      System.out.println("1分待つ");
    }
  }
}


＜switch文＞
条件分岐で冗長にならないようにする
switch(fortune){
  case 1:
    System.out.println("大吉");
    break;
  case 2:
    System.out.println("中吉");
    break;
  case 3:
    System.out.println("吉");
    break;
   default:
    System.out.println("凶");
}

＊あえてbreakで処理を中断しないコード
int fortune = new java.util.Random().nextInt(5) + 1;
switch(fortune){
  case 1:
  case 2:
    System.out.println("大吉");
    break;
  case 3:
    System.out.println("吉");
    break;
  case 4:
  case 5:
    System.out.println("凶");
}


＜メソッドの定義＞
public class Main{
  public static void hello(){           //helloメソッドの定義
    System.out.println("こんにちは")    //helloメソッドが呼び出されたときの処理
  }
}
